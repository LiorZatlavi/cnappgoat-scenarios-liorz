name: dspm-aws-s3-organization-storage-private-public-key
runtime: yaml
description: This scenario provisions S3 buckets containing a private key and a public certificate
cnappgoat-params:
  description: In this scenario, two Amazon Simple Storage Service (S3) buckets are set up, both restricted 
    to organizational access only. Each bucket contains a file with critical security data. The first bucket 
    houses a file that holds a private key, while the second bucket contains a file with a public certificate. 
    The objective of this scenario is to emulate AWS S3 buckets that store essential security components such 
    as private keys and public certificates. This exercise aims to evaluate the capability of a data security 
    product to detect and identify this specific type of sensitive information. 
  friendlyName: Organization access level S3 Bucket Security Key and Certificate Evaluation
  id: dspm-aws-s3-organization-storage-private-public-key
  module: dspm
  scenarioType: native
  platform: aws

variables:
  myOrganization:
    fn::invoke:
      function: aws:organizations:getOrganization
      arguments: {}

resources:

  # first bucket
  cnappgoatBucket:
    type: aws:s3:BucketV2
    properties:
      tags:
        Cnappgoat: true
  cnappgoatBucketOwnershipControls:
    type: aws:s3:BucketOwnershipControls
    properties:
      bucket: ${cnappgoatBucket.id}
      rule:
        objectOwnership: BucketOwnerPreferred
  allowAccessFromOrgPolicy:
    type: aws:s3:BucketPolicy
    properties:
      bucket: ${cnappgoatBucket.id}
      policy: |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "Allow",
              "Effect": "Allow",
              "Principal": "*",
              "Action": "s3:*",
              "Resource": [
                "arn:aws:s3:::${cnappgoatBucket.bucket}",
                "arn:aws:s3:::${cnappgoatBucket.bucket}/*"
              ],
              "Condition": {
                "StringEquals": {
                  "aws:PrincipalOrgID": "${myOrganization.id}"
                }
              }
            }
          ]
        }
    options:
      dependsOn:
        - ${cnappgoatBucketOwnershipControls}
  synced-folder:
    type: synced-folder:index:S3BucketFolder
    properties:
      path: ./data/1
      bucketName: ${cnappgoatBucket.id}
      acl: private
  
  # second bucket
  cnappgoatBucket2:
    type: aws:s3:BucketV2
    properties:
      tags:
        Cnappgoat: true
  cnappgoatBucket2OwnershipControls:
    type: aws:s3:BucketOwnershipControls
    properties:
      bucket: ${cnappgoatBucket2.id}
      rule:
        objectOwnership: BucketOwnerPreferred
  allowAccessFromOrgPolicy2:
    type: aws:s3:BucketPolicy
    properties:
      bucket: ${cnappgoatBucket2.id}
      policy: |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "Allow",
              "Effect": "Allow",
              "Principal": "*",
              "Action": "s3:*",
              "Resource": [
                "arn:aws:s3:::${cnappgoatBucket2.bucket}",
                "arn:aws:s3:::${cnappgoatBucket2.bucket}/*"
              ],
              "Condition": {
                "StringEquals": {
                  "aws:PrincipalOrgID": "${myOrganization.id}"
                }
              }
            }
          ]
        }
    options:
      dependsOn:
        - ${cnappgoatBucket2OwnershipControls}
  synced-folder2:
    type: synced-folder:index:S3BucketFolder
    properties:
      path: ./data/2
      bucketName: ${cnappgoatBucket2.id}
      acl: private

outputs:
  bucketArn: ${cnappgoatBucket.arn}
  bucketId: ${cnappgoatBucket.id}
  bucketDomainName: ${cnappgoatBucket.bucketRegionalDomainName}
  bucket2Arn: ${cnappgoatBucket2.arn}
  bucket2Id: ${cnappgoatBucket2.id}
  bucket2DomainName: ${cnappgoatBucket2.bucketRegionalDomainName}
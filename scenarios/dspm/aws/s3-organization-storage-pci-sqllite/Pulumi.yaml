name: dspm-aws-s3-organization-storage-pci-sqllite
runtime: yaml
description: The scenario provision S3 bucket thats holds an SQLite database with PCI data 
cnappgoat-params:
  description: In this scenario, an Amazon Simple Storage Service (S3) bucket, which is exclusively accessible 
    by the organization, is established to store Payment Card Industry (PCI) data. Notably, the data is stored 
    in an SQLite database file within the bucket, as opposed to plain text. The primary goal of this setup is 
    to simulate an AWS S3 bucket holding sensitive information in a structured database format, in order to 
    assess a data security product's ability to detect and safeguard such data. 
  friendlyName: Organization access level S3 Bucket with SQLite database and PCI data
  id: dspm-aws-s3-organization-storage-pci-sqllite
  module: dspm
  scenarioType: native
  platform: aws

variables:
  myOrganization:
    fn::invoke:
      function: aws:organizations:getOrganization
      arguments: {}

resources:
  cnappgoatBucket:
    type: aws:s3:BucketV2
    properties:
      tags:
        Cnappgoat: true
  cnappgoatBucketOwnershipControls:
    type: aws:s3:BucketOwnershipControls
    properties:
      bucket: ${cnappgoatBucket.id}
      rule:
        objectOwnership: BucketOwnerPreferred
  allowAccessFromOrgPolicy:
    type: aws:s3:BucketPolicy
    properties:
      bucket: ${cnappgoatBucket.id}
      policy: |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "Allow",
              "Effect": "Allow",
              "Principal": "*",
              "Action": "s3:*",
              "Resource": [
                "arn:aws:s3:::${cnappgoatBucket.bucket}",
                "arn:aws:s3:::${cnappgoatBucket.bucket}/*"
              ],
              "Condition": {
                "StringEquals": {
                  "aws:PrincipalOrgID": "${myOrganization.id}"
                }
              }
            }
          ]
        }
    options:
      dependsOn:
        - ${cnappgoatBucketOwnershipControls}
  synced-folder:
    type: synced-folder:index:S3BucketFolder
    properties:
      path: ./data
      bucketName: ${cnappgoatBucket.id}
      acl: private

outputs:
  bucketArn: ${cnappgoatBucket.arn}
  bucketId: ${cnappgoatBucket.id}
  DomainName: ${cnappgoatBucket.bucketRegionalDomainName}
